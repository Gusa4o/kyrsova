import tkinter as tkfrom tkinter import messagebox, simpledialogfrom tkinter import ttkimport csv# головне вікноwindow = tk.Tk()window.title("Телефонна книга")window.geometry("500x300")window["bg"] = "light grey"# додати контактdef add_contact():    name = name_entry.get()    address = address_entry.get()    email = email_entry.get()    mobile_phone = mobile_entry.get()    # Запис данних    with open('contacts.csv', mode='a', newline='', encoding='utf-8') as file:        writer = csv.writer(file)        writer.writerow([name, address, email, mobile_phone])    messagebox.showinfo("Доданий контакт", "Контакт успішно доданий")# огляд контактівdef view_contacts():    try:        with open('contacts.csv', mode='r', encoding='utf-8') as file:            reader = csv.reader(file)            contacts = list(reader)            contacts.sort(key=lambda x: x[0])  # сортування        # відображення контактів        if contacts:            show_contact_dialog(contacts)        else:            messagebox.showinfo("Контакти", "Контактів не знайдено")    except FileNotFoundError:        messagebox.showerror("Помилка", "Файл з контактами не знайдено")# маленьке вікноdef show_contact_dialog(contacts):    current_contact = 0    def display_contact(index):        if 0 <= index < len(contacts):            contact = contacts[index]            name_label.config(text=f"ПІБ: {contact[0]}")            address_label.config(text=f"Адреса: {contact[1]}")            email_label.config(text=f"Електронна пошта: {contact[2]}")            mobile_label.config(text=f"Мобільний телефон: {contact[3]}")        else:            name_label.config(text="")            address_label.config(text="")            email_label.config(text="")            mobile_label.config(text="")    def show_next_contact():        nonlocal current_contact        if current_contact < len(contacts) - 1:            current_contact += 1            display_contact(current_contact)    def show_previous_contact():        nonlocal current_contact        if current_contact > 0:            current_contact -= 1            display_contact(current_contact)    mini_window = tk.Toplevel(window)    mini_window.title("Контакт")    mini_window.geometry("400x400")    mini_window["bg"] = "light green"    name_label = tk.Label(mini_window, text="", font=("Times New Roman", 20), bg="green")    name_label.pack(padx=10, pady=5)    address_label = tk.Label(mini_window, text="", font=("Times New Roman", 20), bg="green")    address_label.pack(padx=10, pady=5)    email_label = tk.Label(mini_window, text="", font=("Times New Roman", 20), bg="green")    email_label.pack(padx=10, pady=5)    mobile_label = tk.Label(mini_window, text="", font=("Times New Roman", 20), bg="green")    mobile_label.pack(padx=10, pady=5)    prev_button = ttk.Button(mini_window, text="Попередній", command=show_previous_contact)    prev_button.pack(side=tk.LEFT, padx=10, pady=10)    next_button = ttk.Button(mini_window, text="Наступний", command=show_next_contact)    next_button.pack(side=tk.RIGHT, padx=10, pady=10)    display_contact(current_contact)# видалення контантівdef delete_contact():    name_to_delete = simpledialog.askstring("Видалення контакту", "Введіть ПІБ контакту, якого бажаєте видалити:")    if name_to_delete:        try:            with open('contacts.csv', mode='r', encoding='utf-8') as file:                reader = csv.reader(file)                contacts = list(reader)            # видалення            updated_contacts = [contact for contact in contacts if contact[0] != name_to_delete]            # запис оновлених контактів            with open('contacts.csv', mode='w', newline='', encoding='utf-8') as file:                writer = csv.writer(file)                writer.writerows(updated_contacts)            messagebox.showinfo("Видалення", "Контакт видалений")        except FileNotFoundError:            messagebox.showerror("Помилка", "Файл з контактами не знайдено")# пошукdef search_kontakt():    search_kontakt = simpledialog.askstring("Пошук контакту", "Введіть ПІБ або номер телефону для пошуку:")    if search_kontakt:        try:            with open('contacts.csv', mode='r', encoding='utf-8') as file:                reader = csv.reader(file)                contacts = list(reader)            # пошук контактів            contact = [contact for contact in contacts if search_kontakt in contact[0] or search_kontakt in contact[3]]            if contact:                show_contact_dialog(contact)            else:                messagebox.showinfo("Пошук контакту", "Контакт не знайдений")        except FileNotFoundError:            messagebox.showerror("Помилка", "Файл з контактами не знайдено")# редагуванняdef edit_contact():    name_to_edit = simpledialog.askstring("Редагування контакту", "Введіть ПІБ контакту, якого бажаєте відредагувати:")    if name_to_edit:        try:            with open('contacts.csv', mode='r', encoding='utf-8') as file:                reader = csv.reader(file)                contacts = list(reader)            for contact in contacts:                if contact[0] == name_to_edit:                    name_entry.delete(0, tk.END)                    name_entry.insert(0, contact[0])                    address_entry.delete(0, tk.END)                    address_entry.insert(0, contact[1])                    email_entry.delete(0, tk.END)                    email_entry.insert(0, contact[2])                    mobile_entry.delete(0, tk.END)                    mobile_entry.insert(0, contact[3])                    break            else:                messagebox.showinfo("Пошук контакту", "Контакт не знайдений")            def save_changes():                new_name = name_entry.get()                new_address = address_entry.get()                new_email = email_entry.get()                new_mobile_phone = mobile_entry.get()                try:                    with open('contacts.csv', mode='r', encoding='utf-8') as file:                        reader = csv.reader(file)                        contacts = list(reader)                    updated_contacts = [[new_name, new_address, new_email, new_mobile_phone] if contact[0] == name_to_edit else contact for contact in contacts]                    with open('contacts.csv', mode='w', newline='', encoding='utf-8') as file:                        writer = csv.writer(file)                        writer.writerows(updated_contacts)                    messagebox.showinfo("Оновлення", "Нові данні збереженно")                except FileNotFoundError:                    messagebox.showerror("Помилка", "Файл з контактами не знайдено")            save_button = ttk.Button(window, text="Зберегти зміни", style="TButton", command=save_changes)            save_button.grid(row=5, column=1, padx=10, pady=5)        except FileNotFoundError:            messagebox.showerror("Помилка", "Файл з контактами не знайдено")tk.Label(window, text="ПІБ:", font=("Arial", 10, "bold"), fg="yellow", bg="light grey").grid(row=0, column=0, padx=10, pady=5)tk.Label(window, text="Адреса:", font=("Arial", 10, "bold"), fg="yellow", bg="light grey").grid(row=1, column=0, padx=10, pady=5)tk.Label(window, text="Електронна пошта:", font=("Arial", 10, "bold"), fg="yellow", bg="light grey").grid(row=2, column=0, padx=10, pady=5)tk.Label(window, text="Мобільний телефон:", font=("Arial", 10, "bold"), fg="yellow", bg="light grey").grid(row=3, column=0, padx=10, pady=5)name_entry = tk.Entry(window, font=("Arial", 10), width=30)name_entry.grid(row=0, column=1, padx=10, pady=5)address_entry = tk.Entry(window, font=("Arial", 10), width=30)address_entry.grid(row=1, column=1, padx=10, pady=5)email_entry = tk.Entry(window, font=("Arial", 10), width=30)email_entry.grid(row=2, column=1, padx=10, pady=5)mobile_entry = tk.Entry(window, font=("Arial", 10), width=30)mobile_entry.grid(row=3, column=1, padx=10, pady=5)# створення керуючих кнопокview_button = ttk.Button(window, text="Переглянути контакти", style="TButton", command=view_contacts)view_button.grid(row=4, column=0, columnspan=2, padx=10, pady=5)delete_button = ttk.Button(window, text="Видалити контакт", style="TButton", command=delete_contact)delete_button.grid(row=5, column=0, padx=10, pady=5)search_button = ttk.Button(window, text="Пошук контакту", style="TButton", command=search_kontakt)search_button.grid(row=5, column=1, padx=10, pady=5)edit_button = ttk.Button(window, text="Редагувати контакт", style="TButton", command=edit_contact)edit_button.grid(row=6, column=0, padx=10, pady=5)add_button = ttk.Button(window, text="Додати контакт", style="TButton", command=add_contact)add_button.grid(row=6, column=1, padx=10, pady=5)style = ttk.Style()style.configure("TButton",                foreground="dark blue",  # Цвет текста кнопки                background="light grey",  # Фоновый цвет кнопки                font=("Arial", 10, "bold"),  # Шрифт кнопки                width=20,  # Ширина кнопки                padding=5,  # Отступы кнопки                relief=tk.RAISED,  # Стиль кнопки                )style.map("TButton",          foreground=[('pressed', 'red'), ('active', 'blue')],          background=[('pressed', '!disabled', 'black'), ('active', 'white')]          )window.mainloop()